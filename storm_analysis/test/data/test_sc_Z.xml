<?xml version="1.0" encoding="ISO-8859-1"?>
<settings>
  <!-- Film parameters -->
  <!-- -1 = start at the beginning, analyze to the end -->
  <start_frame type="int">-1</start_frame>
  <max_frame type="int">-1</max_frame>

  <!-- These are for reducing the analysis AOI -->
  <!--
  <x_start type="int">50</x_start>
  <x_stop type="int">200</x_stop>
  <y_start type="int">50</y_start>
  <y_stop type="int">200</y_stop>
  -->

  <!-- Fitting parameters -->
  <!-- Model is one of 2dfixed, 2d, 3d, or Z"
       2dfixed - fixed sigma 2d gaussian fitting.
       2d - variable sigma 2d gaussian fitting.
       3d - x, y sigma are independently variable,
            z will be fit after peak fitting.
       Z - x, y sigma depend on z, z is fit as
           part of peak fitting.
       -->
  <model type="string">Z</model>

  <!-- Maximum number of iterations for new peak finding -->
  <iterations type="int">4</iterations>

  <!-- camera baseline -->
  <!-- This is what the camera reads with the shutter closed. -->
  <baseline type="float">100.0</baseline>

  <!-- camera calibration file -->
  <!-- This file contains the sCMOS calibration data for the
       region of the camera that the movie comes from. It consists
       of 3 numpy arrays, [offset, variance, gain], each of which
       is the same size as a frame of the movie that is to be
       analyzed. This can be generated for a camera using
       camera_calibration.py and (if it needs to be resliced),
       reslice_calibration.py. -->
  <camera_calibration type="string">calib.npy</camera_calibration>

  <!-- CCD pixel size (in nm) -->
  <pixel_size type="float">160.0</pixel_size>

  <!-- CCD orientation -->
  <!-- Generally you should use "normal", but if you want
       to compare the analysis with older versions of Insight3 
       you'll sometimes find that "inverted" works best. -->
  <orientation type="string">normal</orientation>

  <!-- threshold -->
  <!-- This is basically the same as the minimum height 
       parameter for peak finding in Insight3. You should 
       Use a number roughly equal to the value of the 
       brightest pixel (minus the CCD baseline) in the 
       dimmest peak that you want to detect. If this is 
       too low more background will be detected. If it 
       is too high more peaks will be missed. -->
  <threshold type="float">30.0</threshold>

  <!-- initial guess for sigma -->
  <!-- This is in units of pixels. It is used as the sigma psf
       in image segmentation (see Section 3.1 of the supplementary
       material of:

       "Video-rate nanoscopy using sCMOS camera-specific
       single-molecule localization algorithms"
       Huang et al, Nature Methods, 2013.

       It also used to initialize fitting. If you are using the 
       2dfixed model then it needs to be pretty close to 
       the correct value. For 2d it should be close, probably 
       within 50% or so of the average peak sigma or the 
       fitting might fail to converge on many peaks. 3d is 
       similar to 2d. It should not effect fitting for Z the 
       model. -->
  <sigma type="float">1.0</sigma>

  <!-- Tracking parameters -->
  <!-- Frame descriptor string
       0 - activation frame
       1 - non-specific frame
       2 - channel1 frame
       3 - channel2 frame
       4 - etc..
       -->
  <descriptor type="string">1</descriptor>

  <!-- Radius for matching peaks from frame to frame -->
  <!-- Localizations that are closer than this value 
       (in pixels) in adjacent frames (ignoring activation
       frames) are assumed to come from the same emitter 
       and are averaged together to create a (hopefully) 
       more accurately localized emitter. 
       If this is zero then no matching will be done. -->
  <radius type="float">0.0</radius>


  <!-- Z fitting parameters. -->

  <!-- do z fitting (or not), only relevant for "3d" fitting. -->
  <do_zfit type="int">0</do_zfit>

  <!-- z fit cutoff (used when z is calculated later from wx, wy). -->
  <cutoff type="float">1.0</cutoff>

  <!-- wx vs z parameters. -->
  <wx_wo type="float">334.0</wx_wo>
  <wx_c type="float">150.0</wx_c> <!-- gx -->
  <wx_d type="float">400.0</wx_d> <!-- zrx -->
  <wxA type="float">0.0</wxA>
  <wxB type="float">0.0</wxB>
  <wxC type="float">0.0</wxC>
  <wxD type="float">0.0</wxD>

  <!-- wy vs z parameters. -->
  <wy_wo type="float">334.0</wy_wo>
  <wy_c type="float">-150.0</wy_c> <!-- gy -->
  <wy_d type="float">400.0</wy_d> <!-- zry -->
  <wyA type="float">0.0</wyA>
  <wyB type="float">0.0</wyB>
  <wyC type="float">0.0</wyC>
  <wyD type="float">0.0</wyD>

  <!-- range for z fitting, specified in um-->
  <min_z type="float">-0.5</min_z>
  <max_z type="float">0.5</max_z>


  <!-- Drift correction parameters -->
  <!-- do drift correction 0 = No -->
  <drift_correction type="int">0</drift_correction>

  <!-- number of frames in each sub-STORM image. -->
  <frame_step type="int">500</frame_step>
  
  <!-- ... 2 is a good value -->
  <!-- This is the "scale" at which to render the sub-STORM
       images for drift correction. Drift correction works 
       by creating STORM images from frame_step sized groups 
       of frames. These are rendered scaled by the d_scale 
       parameter. For example, if your data is 256x256 pixels 
       then the drift-correction will create 512x512 sub-STORM 
       images (for d_scale = 2) and then attempt to correlate 
       these images to each other to calculate the drift. 
       Using a larger d_scale value creates higher resolution 
       sub-STORM images, but they are also sparser so you 
       might not see any improvement in the drift correction. -->
  <d_scale type="int">2</d_scale>  

</settings>


